	@PostMapping("/individual")
	public ResponseEntity<Object> compareIndividual(@RequestBody MdmCompareRequestDto mdmCompareRequestDto,
													@RequestParam(required = false) boolean ignoreNationalityFields) {
		return ResponseEntity.status(HttpStatus.OK).body(compareService.getCompareIndividualResponse(mdmCompareRequestDto, ignoreNationalityFields));
	}





  public CompareResponse getCompareIndividualResponse(MdmCompareRequestDto compareRequest, boolean ignoreNationalityFields) {
        try {
            log.info("getCompareIndividualResponse({})", compareRequest);
            PersonIdentifierDto firstDtoPersonIdentifiers = compareRequest.getFirstPersonIdentifiers();
            PersonIdentifierDto secondPersonIdentifires = compareRequest.getSecondPersonIdentifiers();

            RelationshipModel firstRelation = getPersonRelationship(firstDtoPersonIdentifiers);
            RelationshipModel secondRelation = getPersonRelationship(secondPersonIdentifires);

            CompareRequestDto phoneticsCompareRequestDto = getIndividualCompareRequest(firstRelation, secondRelation, ignoreNationalityFields);

            String phoneticsUrl = configReader.getProperty("ab.mdm.phonetics.service.url");
            WebClient webClient = webClientBuilder.baseUrl(phoneticsUrl).build();

            CompareResponse compareResponseDto = webClient.post()
                    .uri(Constant.PHONETICS_INDIVIDUAL_COMPARE_URI)
                    .bodyValue(phoneticsCompareRequestDto)
                    .retrieve()
                    .bodyToMono(CompareResponse.class)
                    .block();

            if (compareResponseDto == null) {
                return CompareResponse.builder()
                        .success(false)
                        .message("Response is Null from Phonetices !")
                        .build();
            }
            compareResponseDto.setSuccess(true);
            compareResponseDto.setFirstPersonGlobalId(firstDtoPersonIdentifiers.getGlobalId());
            compareResponseDto.setSecondPersonGlobalId(secondPersonIdentifires.getGlobalId());
            return compareResponseDto;
        } catch (RuntimeException e) {
            log.error(e.getMessage(), e);
            return CompareResponse.builder()
                    .success(false)
                    .message(e.getMessage())
                    .build();
        } finally {
            log.info("/getCompareIndividualResponse({})", compareRequest);
        }
    }





 void testCompareIndividual_Success() throws Exception {

        MdmCompareRequestDto testRequest = new MdmCompareRequestDto();

        testRequest.setFirstPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("9999")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("9999")
                .build());


        testRequest.setSecondPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("8888")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("8888")
                .build());

        String requestBody = fileReader.convertDataToString(testRequest);

        when(relationshipRepository.getPersonRelationship(any(), any())).thenReturn(relationship);

//        when(compareService.getCompareIndividualResponse(testRequest)).thenReturn(compareResponseDto);

        mockMvc.perform(MockMvcRequestBuilders.post(COMPARE_API_PATH + COMPARE_INDIVIDUAL_PATH)
                        .content(requestBody)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
    }

