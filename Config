package com.arabbank.mdm.functional.test;

import com.arabbank.mdm.commons.lib.model.dto.phonetics.compare.CompareResponse;
import com.arabbank.mdm.controller.CompareController;
import com.arabbank.mdm.helper.FileReader;
import com.arabbank.mdm.model.dto.*;
import com.arabbank.mdm.model.entity.golden.RelationshipModel;

import com.arabbank.mdm.repository.golden.*;
import com.arabbank.mdm.service.CompareService;
import com.arabbank.mdm.commons.lib.configuration.gitlab.ConfigReader;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@Slf4j
@SpringBootTest
@ExtendWith(SpringExtension.class)
@AutoConfigureMockMvc
public class CompareFunctionalTest {

    private static final String COMPARE_API_PATH = "/mdm/v2/golden/compare";
    private static final String COMPARE_INDIVIDUAL_PATH = "/individual";
    private static final String COMPARE_CORPORATE_PATH = "/corporate";
    private static final String GLOBAL_ID_PATH = "/global-id";

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private FileReader fileReader;

    @InjectMocks
    private CompareController compareController;

    @Spy
    @InjectMocks
    private CompareService compareService;

    @Mock
    private CompareResponseDto compareResponseDto;

    @Mock
    private MdmCompareRequestDto mdmCompareRequestDto;

    @Mock
    private PersonIdentifierDto personIdentifierDto;

    @Mock
    private RelationshipRepository relationshipRepository;

    @Mock
    private RelationshipModel relationship;

    @Mock
    private NameRepository nameRepository;

    @Mock
    private LegalStatusRepository legalStatusRepository;

    @Mock
    private DocumentRepository documentRepository;

    @Mock
    private PersonalPerCountryRepository personalPerCountryRepository;

    @Mock
    private CorporateDetailRepository corporateDetailRepository;

    @Mock
    private ConfigReader configReader;

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient webClient;




    @BeforeEach
    public void setup() throws Exception {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(compareController).build();
    }

    @Test
    void testCompareIndividual_Success() throws Exception {

        MdmCompareRequestDto testRequest = new MdmCompareRequestDto();

        testRequest.setFirstPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("9999")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("9999")
                .build());


        testRequest.setSecondPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("8888")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("8888")
                .build());

        String requestBody = fileReader.convertDataToString(testRequest);

        when(relationshipRepository.getPersonRelationship(any(), any())).thenReturn(relationship);

//        when(compareService.getCompareIndividualResponse(testRequest)).thenReturn(compareResponseDto);

        mockMvc.perform(MockMvcRequestBuilders.post(COMPARE_API_PATH + COMPARE_INDIVIDUAL_PATH)
                        .content(requestBody)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Test
    void testCompareIndividual_WithPhoneticsResponse() {
        // Arrange
        when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.build()).thenReturn(webClient);

        // Mock the WebClient chain
        // Mock all pieces in the chain
        WebClient.RequestBodyUriSpec requestBodyUriSpec = mock(WebClient.RequestBodyUriSpec.class);
        WebClient.RequestBodySpec requestBodySpec = mock(WebClient.RequestBodySpec.class); // <-- important
        @SuppressWarnings("unchecked")
        WebClient.RequestHeadersSpec<?> requestHeadersSpec = (WebClient.RequestHeadersSpec<?>) mock(WebClient.RequestHeadersSpec.class);
        WebClient.ResponseSpec responseSpec = mock(WebClient.ResponseSpec.class);

// Arrange WebClient chain
        when(webClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString())).thenReturn(requestBodySpec);
        when(requestBodySpec.bodyValue(any())).thenReturn(requestHeadersSpec); // <-- now valid
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);

        // Mock response
        CompareResponse mockResponse = CompareResponse.builder()
                .success(true)
                .firstPersonGlobalId("9999")
                .secondPersonGlobalId("8888")
                .build();

        when(responseSpec.bodyToMono(CompareResponse.class)).thenReturn(Mono.just(mockResponse));

        // Create a valid request (testRequest)
        CompareRequestDto testRequest = CompareRequestDto.builder()
                .parameters(new CompareParametersDto()) // fill in with valid parameters if needed
                .firstObject(new ObjRequestDto())       // fill with mock object
                .secondObject(new ObjRequestDto())      // fill with mock object
                .build();

        // Act
        CompareResponse response = compareService.getCompareIndividualResponse(testRequest, false);

        // Assert
        assertTrue(response.isSuccess());
        assertEquals("9999", response.getFirstPersonGlobalId());
        assertEquals("8888", response.getSecondPersonGlobalId());
    }

    @Test
    void testCompareCorporate_Success() throws Exception {

        MdmCompareRequestDto testRequest = new MdmCompareRequestDto();

        testRequest.setFirstPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("9999")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("9999")
                .build());
        testRequest.setSecondPersonIdentifiers(PersonIdentifierDto.builder()
                .globalId("8888")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("8888")
                .build());

        String requestBody = fileReader.convertDataToString(testRequest);

//        when(compareService.getCompareCorporateResponse(any())).thenReturn(compareResponseDto);

        mockMvc.perform(MockMvcRequestBuilders.post(COMPARE_API_PATH + COMPARE_CORPORATE_PATH)
                        .content(requestBody)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Test
    void testGlobalId_Success() throws Exception {

        PersonIdentifierDto testIdentifier = PersonIdentifierDto.builder()
                .globalId("9999")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("9999")
                .build();

        when(relationshipRepository.getRelationship(any(), any())).thenReturn(relationship);

        when(compareService.getGlobalId(testIdentifier)).thenReturn("dummy_data");

        String requestBody = fileReader.convertDataToString(testIdentifier);

        mockMvc.perform(MockMvcRequestBuilders.post(COMPARE_API_PATH + GLOBAL_ID_PATH)
                        .content(requestBody)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().string("dummy_data"))
                .andReturn();

    }

    @Test
    void testGlobalId_EmptyResult() throws Exception {

        PersonIdentifierDto testIdentifier = PersonIdentifierDto.builder()
                .globalId("9999")
                .relationshipCountry("EG")
                .organization("AB")
                .role("AH")
                .relationshipSequence(1)
                .customerId("9999")
                .build();

        when(relationshipRepository.getRelationship(any(), any())).thenReturn(relationship);

        when(compareService.getGlobalId(testIdentifier)).thenReturn(null);

        String requestBody = fileReader.convertDataToString(testIdentifier);

        mockMvc.perform(MockMvcRequestBuilders.post(COMPARE_API_PATH + GLOBAL_ID_PATH)
                        .content(requestBody)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").doesNotExist())
                .andReturn();
    }
}
