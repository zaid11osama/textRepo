package com.TestApi.start.controller;


import com.TestApi.start.service.ApiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class ApiController {


    private final ApiService apiService;

    @Autowired
    public ApiController(ApiService apiService){
        this.apiService=apiService;

    }



    @GetMapping("/getAllRelations/{numberOfThreads}")
    public ResponseEntity<List<String>> fetchData(@PathVariable int numberOfThreads){

        List<CompletableFuture<List<String>>> futures = new ArrayList<>();


        for(int i =0 ;i< numberOfThreads ;i++){

            int threadNum = i+1;
            for(int j=0;j<10;j++){

                int requestID = (threadNum-1) * 10 + (j+1);
                futures.add(apiService.callApi(requestID));
            }

        }
        //wait for all requests to complete
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        //collect all responses

       // List<String>responses = futures.stream().map(CompletableFuture::join).collect(Collectors.toList());

        List<String>responses=futures.stream().flatMap((future)->future.join().stream()).collect(Collectors.toList());

        return new ResponseEntity<>(responses, HttpStatus.OK);


    }


}











package com.TestApi.start.service;

import com.TestApi.start.config.ApiConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
public class ApiService {






    private final RestTemplate restTemplate;
    private final ApiConfig apiConfig;
    private final HttpHeaders commonHeaders;

    @Autowired
    public ApiService(RestTemplate restTemplate,ApiConfig apiConfig,HttpHeaders commonHeaders) {

        this.restTemplate = restTemplate;
        this.apiConfig=apiConfig;
        this.commonHeaders=commonHeaders;
    }

    @Async("taskExecutor")
    public CompletableFuture<List<String>> callApi(int requestID) {


        List<String> responseBodies = new ArrayList<>();

        List<String>urls = apiConfig.getUrls();

        for (String url : urls){

            try{

        HttpEntity entity = new HttpEntity(commonHeaders);
        HttpEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        saveResponseToFile(response.getBody());
        responseBodies.add(response.getBody());


            } catch (Exception e) {

        System.out.println("Request " + requestID + " failed for url " + url +" - "+e.getMessage());
            }



        System.out.println("Request " + requestID + " completed by " + Thread.currentThread().getName());
        }




        return CompletableFuture.completedFuture(responseBodies);




    }

    private void saveResponseToFile(String responseBody) {

        try {
            String fileName = "C:\\Users\\Dev04\\Desktop\\result.txt";
            File file = new File(fileName);
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write(responseBody);
                //  System.out.println("file saved successfully");
            }
        } catch (IOException e) {

            System.out.println(e);
        }
    }


}
