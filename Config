package com.TestApi.start.controller;

import com.TestApi.start.service.PostApiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class PostApiController {

    private final PostApiService postApiService;

    @Autowired
    public PostApiController(PostApiService postApiService) {
        this.postApiService = postApiService;
    }

    @PostMapping("/sendData/{numberOfThreads}")
    public ResponseEntity<List<String>> sendData(
            @PathVariable int numberOfThreads,
            @RequestBody String requestBody) {

        List<CompletableFuture<List<String>>> futures = new ArrayList<>();

        for (int i = 0; i < numberOfThreads; i++) {
            int threadNum = i + 1;
            for (int j = 0; j < 10; j++) {
                int requestID = (threadNum - 1) * 10 + (j + 1);
                futures.add(postApiService.sendData(requestID, requestBody));
            }
        }

        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        List<String> responses = futures.stream()
                .flatMap(future -> future.join().stream())
                .collect(Collectors.toList());

        return new ResponseEntity<>(responses, HttpStatus.OK);
    }
}
