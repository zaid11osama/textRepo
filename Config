@Test
void testCompareIndividual_WithPhoneticsResponse() {
    // Arrange
    when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
    when(webClientBuilder.build()).thenReturn(webClient);

    // --- Mock the WebClient chain ---
    WebClient.RequestBodyUriSpec requestBodyUriSpec = mock(WebClient.RequestBodyUriSpec.class);
    WebClient.RequestBodySpec requestBodySpec = mock(WebClient.RequestBodySpec.class);
    WebClient.RequestHeadersSpec<?> requestHeadersSpec = mock(WebClient.RequestHeadersSpec.class);
    WebClient.ResponseSpec responseSpec = mock(WebClient.ResponseSpec.class);

    when(webClient.post()).thenReturn(requestBodyUriSpec);
    when(requestBodyUriSpec.uri(anyString())).thenReturn(requestBodySpec);
    when(requestBodySpec.bodyValue(any())).thenReturn(requestHeadersSpec);
    when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);

    CompareResponse mockResponse = CompareResponse.builder()
            .success(true)
            .firstPersonGlobalId("ignored")
            .secondPersonGlobalId("ignored")
            .build();

    when(responseSpec.bodyToMono(CompareResponse.class)).thenReturn(Mono.just(mockResponse));

    // --- Build RelationshipModel mocks (instead of null) ---
    RelationshipModel firstRelation = RelationshipModel.builder()
            .globalId("9999")
            .organization("AB")
            .relationCountry(new Translation("EG")) // assuming constructor
            .role(new Translation("AH"))
            .relationshipSequence(1)
            .customerId("9999")
            .build();

    RelationshipModel secondRelation = RelationshipModel.builder()
            .globalId("8888")
            .organization("AB")
            .relationCountry(new Translation("EG"))
            .role(new Translation("AH"))
            .relationshipSequence(1)
            .customerId("8888")
            .build();

    // Stub repository properly
    when(relationshipRepository.getPersonRelationship(anyString(), any()))
            .thenReturn(firstRelation)
            .thenReturn(secondRelation);

    // --- Build input DTO ---
    MdmCompareRequestDto testRequest = new MdmCompareRequestDto();
    testRequest.setFirstPersonIdentifiers(PersonIdentifierDto.builder()
            .globalId("9999")
            .relationshipCountry("EG")
            .organization("AB")
            .role("AH")
            .relationshipSequence(1)
            .customerId("9999")
            .build());
    testRequest.setSecondPersonIdentifiers(PersonIdentifierDto.builder()
            .globalId("8888")
            .relationshipCountry("EG")
            .organization("AB")
            .role("AH")
            .relationshipSequence(1)
            .customerId("8888")
            .build());

    // Act
    CompareResponse response = compareService.getCompareIndividualResponse(testRequest, false);

    // Assert
    assertNotNull(response);
    assertTrue(response.isSuccess());
    assertEquals("9999", response.getFirstPersonGlobalId()); // âœ… will not be null now
    assertEquals("8888", response.getSecondPersonGlobalId());
}
