this is my controller test


    @Test
    void testGetTasks_Success() throws Exception {
        List<LinkedHashMap<String, Object>> rawList =
                fileReader.getDataAsJson("classpath:dummy-data/tasks.json", List.class);

        ObjectMapper objectMapper = new ObjectMapper();
        List<Task> tasks = rawList.stream()
                .map(map -> objectMapper.convertValue(map, Task.class))
                .collect(Collectors.toList());


        Page<Task> pageableTasks = convertListToPage(tasks, PageRequest.of(0, 5));
        when(taskRepository.getCheckerTasksFiltered(any(), any())).thenReturn(pageableTasks);

        RecordsManagerDto<Task> tasksManager = RecordsManagerDto.<Task>builder()
                .records(pageableTasks.getContent())
                .meta(RecordsMetaDto.builder().page(pageableTasks.getPageable().getPageNumber() + 1)
                        .pageCount(pageableTasks.getTotalPages())
                        .totalCount(pageableTasks.getTotalElements())
                        .pageSize(pageableTasks.getSize())
                        .build())
                .build();

        when(checkerService.getTasks(1, 10, null , null)).thenReturn(tasksManager);

        mockMvc.perform(MockMvcRequestBuilders.get(CHECKER_API_PATH + GET_TASKS_API_PATH)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.records").isNotEmpty())
                .andReturn();
    }


this is my service

    public RecordsManagerDto<Task> getTasks(int page, int pageSize, String filteredValue, String columnSort) {
        try {
            log.info("getTasks({},{},{},{})", page, pageSize, filteredValue, columnSort);
            Pageable pageable = createPageable(columnSort, GLOBAL_ID, page, pageSize);
            Page<Task> checkerTasks = taskRepository.getCheckerTasksFiltered(filteredValue, pageable);

            fillCustomerType(checkerTasks.getContent());

            return HelperUtils.getRecordsManager(checkerTasks);


        } catch (Exception ex) {
            log.error("An unexpected error occurred: {}", ex.getMessage());
            throw new GoldenMDMException("An unexpected error occurred while retrieving tasks.");

        } finally {
            log.info("/getTasks({},{},{},{})", page, pageSize, filteredValue, columnSort);
        }
    }

this is my controller

	@GetMapping("/tasks")
	public ResponseEntity<Object> getTasks(@RequestParam(value = "page", defaultValue = "1") int page,
										   @RequestParam(value = "pageSize", defaultValue = "10") int pageSize,
										   @RequestParam(value = "filteredValue", required = false) String filteredValue,
										   @RequestParam(value = "columnSort", required = false) String columnSort) {
		return ResponseEntity.status(HttpStatus.OK).body(checkerService.getTasks(page, pageSize, filteredValue, columnSort));
	}
