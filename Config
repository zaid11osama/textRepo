 @Test
    void testGetNewPartyModel_Success() throws Exception {
        String partyId = "P123";
        String reference = "REF001";

        // Mock internal method calls
        when(helperUtils.generateReference()).thenReturn(reference);
        when(partyService.getGlobalIdByIdentifer(
                anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(relationship);

        when(partyService.getFullPartyDetails(eq(relationship), anyMap(), eq(reference)))
                .thenReturn(partyModel);

        when(partyService.checkPartyModelData(any())).thenReturn(false);
        when(partyService.mapDtoToModel(eq(partyModel), eq(relationship), anyString(), anyString()))
                .thenReturn(newPartyModel);

        // Act
        NewPartyModel result = partyService.getNewPartyModel(headers, partyId);

        // Assert
        assertNotNull(result);
        verify(newPartieModelSetter).setDescrtiopns(newPartyModel, headers, partyId);
        verify(partyService).setGuardianDetails(newPartyModel);
        verify(helperUtils).generateReference();
    }

    @Test
    void testGetNewPartyModel_RelationshipNull_ThrowsBusinessWarningException() {
        when(partyService.getGlobalIdByIdentifer(any(), any(), any(), any(), any())).thenReturn(null);

        assertThrows(BusinessWarningException.class,
                () -> partyService.getNewPartyModel(headers, "P123"));
    }

    @Test
    void testGetNewPartyModel_CheckPartyModelData_ThrowsCustomerNotFound() throws Exception {
        when(partyService.getGlobalIdByIdentifer(any(), any(), any(), any(), any())).thenReturn(relationship);
        when(helperUtils.generateReference()).thenReturn("REF001");
        when(partyService.getFullPartyDetails(any(), any(), any())).thenReturn(partyModel);
        when(partyService.checkPartyModelData(any())).thenReturn(true);

        assertThrows(CustomerNotFoundException.class,
                () -> partyService.getNewPartyModel(headers, "P123"));
    }

    @Test
    void testGetNewPartyModel_JsonProcessingException() throws Exception {
        when(partyService.getGlobalIdByIdentifer(any(), any(), any(), any(), any())).thenThrow(JsonProcessingException.class);

        assertThrows(GeneralBadRequestException.class,
                () -> partyService.getNewPartyModel(headers, "P123"));
    }

    @Test
    void testGetNewPartyModel_SqlException() throws Exception {
        when(partyService.getGlobalIdByIdentifer(any(), any(), any(), any(), any())).thenThrow(SQLException.class);

        assertThrows(DatabaseException.class,
                () -> partyService.getNewPartyModel(headers, "P123"));
    }
