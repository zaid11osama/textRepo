package com.TestApi.start.service;

import com.TestApi.start.config.ApiConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
public class DeleteApiService {

    private final RestTemplate restTemplate;
    private final ApiConfig apiConfig;
    private final HttpHeaders commonHeaders;

    @Autowired
    public DeleteApiService(RestTemplate restTemplate, ApiConfig apiConfig, HttpHeaders commonHeaders) {
        this.restTemplate = restTemplate;
        this.apiConfig = apiConfig;
        this.commonHeaders = commonHeaders;
    }

    @Async("taskExecutor")
    public CompletableFuture<List<String>> deleteData(int requestID, String requestBody) {
        List<String> responseBodies = new ArrayList<>();
        List<String> urls = apiConfig.getUrls();

        for (String url : urls) {
            try {
                HttpEntity<String> entity = new HttpEntity<>(requestBody, commonHeaders);
                ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.DELETE, entity, String.class);
                responseBodies.add(response.getBody());
            } catch (Exception
















package com.TestApi.start.controller;

import com.TestApi.start.service.DeleteApiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class DeleteApiController {

    private final DeleteApiService deleteApiService;

    @Autowired
    public DeleteApiController(DeleteApiService deleteApiService) {
        this.deleteApiService = deleteApiService;
    }

    @DeleteMapping("/deleteData/{numberOfThreads}")
    public ResponseEntity<List<String>> deleteData(
            @PathVariable int numberOfThreads,
            @RequestBody String requestBody) {

        List<CompletableFuture<List<String>>> futures = new ArrayList<>();

        for (int i = 0; i < numberOfThreads; i++) {
            int threadNum = i + 1;
            for (int j = 0; j < 10; j++) {
                int requestID = (threadNum - 1) * 10 + (j + 1);
                futures.add(deleteApiService.deleteData(requestID, requestBody));
            }
        }

        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        List<String> responses = futures.stream()
                .flatMap(future -> future.join().stream())
                .collect(Collectors.toList());

        return new ResponseEntity<>(responses, HttpStatus.OK);
    }
}
