    public ByteArrayInputStream getExcelTasks(String filteredValue, String columnSort) {
        ByteArrayInputStream checkerData;
        try {
            log.info("getExcelTasks({},{})", filteredValue, columnSort);
            List<Task> checkerTasks = taskRepository.getCheckerTasksFilteredList(filteredValue);

            if (checkerTasks.isEmpty()) {
                throw new ServiceNotFoundException("No tasks found for the given filter: " + filteredValue);
            }

            fillCustomerType(checkerTasks);

            List<Column> columnList = new ArrayList<>();
            columnList.add(Column.builder()
                    .name("Task ID")
                    .key("taskId")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Global ID")
                    .key("globalId")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Product ID")
                    .key("productId")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Country")
                    .key("relationCountry")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Organization")
                    .key("organization")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Role")
                    .key("role")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Status")
                    .key("recordStatus")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("User")
                    .key("checkerUser")
                    .type(ColumnType.TEXT)
                    .build());
            columnList.add(Column.builder()
                    .name("Customer Type")
                    .key("customerType")
                    .type(ColumnType.TEXT)
                    .build());
            checkerData = ExcelGenerator.generateExcel(columnList, ObjectToMapConvertor.convertObjectToMap(checkerTasks), ExcelStyleTemplate.TEMPLATE_A);

        } catch (IOException e) {
            throw new RuntimeException("error in generating excel");
        } catch (RuntimeException ex) {
            log.error("An unexpected error occurred: {}", ex.getMessage());
            throw new GoldenMDMException("An unexpected error occurred while retrieving tasks.");

        } finally {
            log.info("getExcelTasks({},{})", filteredValue, columnSort);
        }
        return checkerData;
    }


	@GetMapping("/tasks/excel")
	public ResponseEntity<Object> getExcelTasks(@RequestParam(value = "filteredValue", required = false) String filteredValue,
												@RequestParam(value = "columnSort", required = false) String columnSort) {
		ByteArrayInputStream excelTasks = checkerService.getExcelTasks(filteredValue, columnSort);
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION)
				.contentType(new MediaType("application", "force-download"))
				.body(excelTasks.readAllBytes());

	}

 @Test
    void testGetTasksExcel_Success() throws Exception {
        List<LinkedHashMap<String, Object>> rawList =
                fileReader.getDataAsJson("classpath:dummy-data/tasks.json", List.class);

        ObjectMapper objectMapper = new ObjectMapper();
        List<Task> tasks = rawList.stream()
                .map(map -> objectMapper.convertValue(map, Task.class))
                .collect(Collectors.toList());
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        when(taskRepository.getCheckerTasksFilteredList(any())).thenReturn(tasks);
        when(checkerService.getExcelTasks(any(), any())).thenReturn(new ByteArrayInputStream(outputStream.toByteArray()));

        mockMvc.perform(MockMvcRequestBuilders.get(CHECKER_API_PATH + GET_TASKS_EXCEL_API_PATH)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
    }
