import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import javax.xml.soap.SOAPMessage;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import com.arabbank.model.NewPartyModel;
import com.arabbank.model.RiskRating;

class SoapRequestServiceTest {

    @InjectMocks
    private SoapRequestService soapRequestService;

    @Mock
    private ConfigReader configReader;

    @Spy
    private SoapRequestService spyService; // for partial mocking of internal methods

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetRiskRating_Success() throws Exception {
        // Arrange
        NewPartyModel mockNewParty = mock(NewPartyModel.class);
        Map<String, String> headers = new HashMap<>();
        CheckCustomerDueDiligenceRulesRequest mockRequest = mock(CheckCustomerDueDiligenceRulesRequest.class);
        SOAPMessage mockSoapMessage = mock(SOAPMessage.class);
        RiskRating mockRiskRating = new RiskRating();
        mockRiskRating.setRiskRating("High");

        // Spy on the service to mock private/helper calls
        SoapRequestService service = spy(new SoapRequestService(configReader));

        doReturn(mockRequest).when(service).fillRequest(mockNewParty, headers);
        doReturn(mockSoapMessage).when(service).createSoapRequest(mockRequest);
        doReturn(mockRiskRating).when(service).sendSoapRequest(mockSoapMessage);

        // Act
        String result = service.getRiskRating(mockNewParty, headers);

        // Assert
        assertEquals("High", result);
        verify(service).fillRequest(mockNewParty, headers);
        verify(service).createSoapRequest(mockRequest);
        verify(service).sendSoapRequest(mockSoapMessage);
    }

    @Test
    void testGetRiskRating_NullRiskRating() throws Exception {
        // Arrange
        NewPartyModel mockNewParty = mock(NewPartyModel.class);
        Map<String, String> headers = new HashMap<>();
        CheckCustomerDueDiligenceRulesRequest mockRequest = mock(CheckCustomerDueDiligenceRulesRequest.class);
        SOAPMessage mockSoapMessage = mock(SOAPMessage.class);

        SoapRequestService service = spy(new SoapRequestService(configReader));

        doReturn(mockRequest).when(service).fillRequest(mockNewParty, headers);
        doReturn(mockSoapMessage).when(service).createSoapRequest(mockRequest);
        doReturn(null).when(service).sendSoapRequest(mockSoapMessage);

        // Act
        String result = service.getRiskRating(mockNewParty, headers);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetRiskRating_ThrowsException() throws Exception {
        // Arrange
        NewPartyModel mockNewParty = mock(NewPartyModel.class);
        Map<String, String> headers = new HashMap<>();
        SoapRequestService service = spy(new SoapRequestService(configReader));

        doThrow(new RuntimeException("SOAP error"))
            .when(service)
            .fillRequest(any(), any());

        // Act & Assert
        Exception ex = assertThrows(Exception.class, () -> service.getRiskRating(mockNewParty, headers));
        assertTrue(ex.getMessage().contains("SOAP error"));
    }
