@Test
void testUpdateCustomer() throws Exception {
    // given
    String identifier = "CUST123";

    Map<String, String> headers = new HashMap<>();
    headers.put("role", "admin");
    headers.put("user", "Zaid");

    // Prepare request body
    PartyName partyName = PartyName.builder()
            .bigName("Updated Name")
            .firstName("Updated Name")
            .fullNameEN("Updated Name")
            .build();

    Map<String, PartyName> partyNames = new HashMap<>();
    partyNames.put(identifier, partyName);

    NewPartyModel requestBody = new NewPartyModel();
    requestBody.setNames(partyNames);

    // Mock expected response
    Map<String, Object> expectedResponse = Map.of(
            "status", "updated",
            "id", identifier,
            "name", "Updated Name"
    );

    when(mainService.updateAbCustomer(any(NewPartyModel.class), anyMap(), eq(identifier)))
            .thenReturn(expectedResponse);

    // when + then
    mockMvc.perform(MockMvcRequestBuilders.put("/parties/{identifier}", identifier)
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(new ObjectMapper().writeValueAsString(requestBody))
                    .header("role", "admin")
                    .header("user", "Zaid"))
            .andDo(print()) // ðŸ‘ˆ prints JSON response for debugging
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.status").value("updated"))
            .andExpect(jsonPath("$.id").value(identifier))
            .andExpect(jsonPath("$.name").value("Updated Name"));

    // verify service interaction
    verify(mainService).updateAbCustomer(any(NewPartyModel.class), anyMap(), eq(identifier));
}
