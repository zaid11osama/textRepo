 @GetMapping("/getAllRelations/{numberOfThreads}")
    public ResponseEntity<List<String>> fetchData(@PathVariable int numberOfThreads){

        List<CompletableFuture<String>> futures = new ArrayList<>();


        for(int i =0 ;i< numberOfThreads ;i++){

            int threadNum = i+1;
            for(int j=0;j<10;j++){

                int requestID = (threadNum-1) * 10 + (j+1);
                futures.add(apiService.callApi(requestID));
            }

        }
        //wait for all requests to complete
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        //collect all responses

        List<String>responses = futures.stream().map(CompletableFuture::join).collect(Collectors.toList());

        return new ResponseEntity<>(responses, HttpStatus.OK);


    }
