
 @Test
    void shouldMapEmploymentIncomesProperly() {
        // given
        PartyModel partyModel = new PartyModel();
        com.arabbank.model.entity.golden.EmploymentIncomes incomes = new com.arabbank.model.entity.golden.EmploymentIncomes();
        incomes.setEmployedFrom(Date.valueOf("2020-01-01"));
        incomes.setBusinessSector(new Translation("IT","IT","IT"));
        incomes.setEmploymentStatus(new Translation("Full-Time","Full-Time","Full-Time"));
        incomes.setSalaryRange(new Translation("1000-2000","1000-2000","IT"));
        incomes.setProfession(new Translation("Developer","Developer","IT"));
        incomes.setOldProfession("Engineer");
        incomes.setPositionTitle(new Translation("IT","Senior","IT"));
        incomes.setPositionOthers("Other Position");
        incomes.setIncomeCode(new Translation("IT","INC123","IT"));
        incomes.setSalaryReceptionMechanism(new Translation("IT","IT","IT"));
        incomes.setIsSalaryTransferred(1);
        incomes.setIncomeCurrency(new Translation("IT","USD","IT"));

        partyModel.setWorkDetail(incomes);

        Relationship relationship = new Relationship();
        Role role = new Role();

        relationship.setRole(new Translation("IT","IT","IT"));
        relationship.setGlobalId("global-123");
        relationship.setRelationCountry(new Translation("IT","IT","IT"));
        relationship.setRelationshipSequence(1);
        relationship.setOrganization("OrgName");

        partyModel.setRelationships(Collections.singletonList(relationship));


        Name name = new Name();
        name.setLanguage(new Translation("EN","EN","EN"));
        name.setBigName("BigNameValue");

        when(nameRepository.getName(any(), anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Optional.of(name));

        // when
        Employment result = partyService.mapEmploymentIncomesToEmployment(partyModel);

        // then
        assertNotNull(result);

        assertEquals("IT", result.get_businessSector().getCode());
        assertEquals("Full-Time", result.get_status().getCode());
        assertEquals("1000-2000", result.get_salaryRange().getCode());
        assertEquals("Developer", result.get_profession().getCode());
        assertEquals("Engineer", result.getProfessionOthers());
        assertEquals("Senior", result.get_professionalLevel().getCode());
        assertEquals("Other Position", result.getProfessionalLevelOthers());
        assertEquals("INC123", result.get_incomeCode().getCode());

        assertEquals("USD", result.get_incomeCurrency().getCode());




           }





org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at com.arabbank.service.PartyServiceTest.shouldMapEmploymentIncomesProperly(PartyServiceTest.java:1238)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.

	at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:192)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
