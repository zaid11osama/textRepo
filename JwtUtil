@Test
void testUpdateAbCustomer_Success() throws Exception {
    // Arrange
    String response = "UPDATED_SUCCESSFULLY";
    when(dbLogger.logIntoDb(any(), any(), any(), any())).thenReturn(logChannel);
    when(partyService.updateAbTransaction(any(), any(), any(), any()))
            .thenReturn(response);
    when(objectMapper.writeValueAsString(response)).thenReturn("\"UPDATED_SUCCESSFULLY\"");

    // Act
    String result = mainService.updateAbCustomer(newPartyModel, headers, "party123");

    // Assert
    assertThat(result).isEqualTo(response);

    verify(dbLogger).updateLogChannelOutput(
            eq("\"UPDATED_SUCCESSFULLY\""),
            eq(HttpStatus.OK.name()),
            eq(HttpStatus.OK.value()),
            eq(logChannel)
    );
}





@Test
void testUpdateAbCustomer_Exception() throws Exception {
    // Arrange
    when(dbLogger.logIntoDb(any(), any(), any(), any())).thenReturn(logChannel);
    when(partyService.updateAbTransaction(any(), any(), any(), any()))
            .thenThrow(new RuntimeException("Update failed"));

    // Act & Assert
    Exception ex = assertThrows(RuntimeException.class,
            () -> mainService.updateAbCustomer(newPartyModel, headers, "party123"));

    assertThat(ex.getMessage()).isEqualTo("Update failed");

    verify(dbLogger).updateLogChannelOutput(
            eq("Update failed"),
            eq(HttpStatus.BAD_REQUEST.name()),
            eq(HttpStatus.BAD_REQUEST.value()),
            eq(logChannel)
    );
}







