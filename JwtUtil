 @Test
    void testGenerateReference_LengthAndNonEmpty() {
        String ref = HelperUtils.generateReference();
        assertNotNull(ref);
        assertFalse(ref.isEmpty());
        assertTrue(ref.length() <= 30);
    }

    @Test
    void testPopulateHeadersValueWithDefaultValue_KeyExistsAndNotEmpty() {
        Map<String, String> headers = new HashMap<>();
        headers.put("key", "value");

        String result = HelperUtils.populateHeadersValueWithDefaultValue(headers, "key");

        assertEquals("value", result);
    }

    @Test
    void testPopulateHeadersValueWithDefaultValue_KeyMissing() {
        Map<String, String> headers = new HashMap<>();
        String result = HelperUtils.populateHeadersValueWithDefaultValue(headers, "missing");

        assertEquals(Constants.Others._BLANKS, result);
    }

    @Test
    void testPopulateHeadersValueWithDefaultValue_KeyExistsButEmpty() {
        Map<String, String> headers = new HashMap<>();
        headers.put("emptyKey", "");

        String result = HelperUtils.populateHeadersValueWithDefaultValue(headers, "emptyKey");

        assertEquals(Constants.Others._BLANKS, result);
    }

    @Test
    void testIsEmpty_String() {
        assertTrue(HelperUtils.isEmpty(null));
        assertTrue(HelperUtils.isEmpty(""));
        assertTrue(HelperUtils.isEmpty("   "));
        assertFalse(HelperUtils.isEmpty("Hello"));
    }

    @Test
    void testIsEmpty_Collection() {
        assertTrue(HelperUtils.isEmpty(null));
        assertTrue(HelperUtils.isEmpty(Collections.emptyList()));
        assertFalse(HelperUtils.isEmpty(Arrays.asList("item")));
    }

    @Test
    void testCheckTranslation_NonNullTranslation() {
        Translation translation = new Translation();
        translation.setCode("code123");
        assertEquals("code123", HelperUtils.checkTranslation(translation));
    }

    @Test
    void testCheckTranslation_NullTranslation() {
        assertNull(HelperUtils.checkTranslation(null));
    }

    @Test
    void testCheckDescription_NonNullTranslation() {
        Translation translation = new Translation();
        translation.setDescription("desc123");
        assertEquals("desc123", HelperUtils.checkDescription(translation));
    }

    @Test
    void testCheckDescription_NullTranslation() {
        assertNull(HelperUtils.checkDescription(null));
    }

    @Test
    void testPopulateRequestHeader_FullHeaders() {
        Map<String, String> headers = new HashMap<>();
        headers.put(MdmHeaderRequest.CHANNEL_ID, "ch1");
        headers.put(MdmHeaderRequest.INPUT_COUNTRY, "JO");
        headers.put(MdmHeaderRequest.TRANSACTION_REFERENCE, "tr123");
        headers.put(MdmHeaderRequest.INPUT_TIMESTAMP, "2025-10-08T12:00");
        headers.put(MdmHeaderRequest.LANGUAGE, "EN");
        headers.put(MdmHeaderRequest.IDENTIFIER_TYPE, "IDType");
        headers.put(MdmHeaderRequest.ROLE, "admin");
        headers.put(MdmHeaderRequest.WITH_CUSTOMER_ID, "cust123");

        RequestHeader result = HelperUtils.populateRequestHeader(headers);

        assertEquals("ch1", result.getChannelId());
        assertEquals("JO", result.getInputCountry());
        assertEquals("tr123", result.getTransactionReference());
        assertEquals("2025-10-08T12:00", result.getInputTimestamp());
        assertEquals("EN", result.getLanguage());
        assertEquals("IDType", result.getIdentifirType());
        assertEquals("admin", result.getRole());
        assertEquals("cust123", result.getWithCustomerId());
    }

    @Test
    void testPopulateRequestHeader_PartialHeaders() {
        Map<String, String> headers = new HashMap<>();
        headers.put(MdmHeaderRequest.CHANNEL_ID, "ch1");

        RequestHeader result = HelperUtils.populateRequestHeader(headers);

        assertEquals("ch1", result.getChannelId());
        assertNull(result.getInputCountry());
        assertNull(result.getTransactionReference());
    }
