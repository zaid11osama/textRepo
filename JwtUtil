    @Mock
    private PortfolioDetailsRepository portfolioDetailsRepository;
    @Mock private MdmLogCupTransactionRepository mdmLogCupTransactionRepository;
    @Mock private GoldenRelationshipRepository goldenRelationshipRepository;
    @Mock private PersonalPerCountryRepository personalPerCountryRepository;
    @Mock private ComplianceDetailRepository complianceDetailRepository;
    @Mock private MdmSysQuestionsRepository mdmSysQuestionsRepository;
    @Mock private FlagsAttributeRepository flagsAttributeRepository;
    @Mock private PartyImagesRepository partyImagesRepository;
    @Mock private LegalStatusRepository legalStatusRepository;
    @Mock private RelationshipRepository relationshipRepository;
    @Mock private NewPartieModelSetter newPartieModelSetter;
    @Mock private KafkaProducerService kafkaProducerService;
    @Mock private NewPartyModelMapper newPartyModelMapper;
    @Mock private SoapRequestService soapRequestService;
    @Mock private MasterRepository masterRepository;
    @Mock private PartyModelSetter partyModelSetter;
    @Mock private NameRepository nameRepository;
    @Mock private SrcNameRepository srcNameRepository;
    @Mock private OnboardingInProgressCustomerRepository onboardingInProgressCustomerRepository;
    @Mock private MdmApisClient mdmApisClient;
    @Mock private ObjectMapper objectMapper;
    @Mock private MdmApisClient apisClient;
    @Mock private KafkaUtil kafkaUtil;
    @Mock private MdmSysTranslationsRepository mdmSysTranslationsRepository;
    @Mock private TranslationsService translationsService;
    @Mock private ConfigReader configReader;

    @InjectMocks
    private PartyService partyService;

    private NewPartyModel newPartyModel;
    private Map<String, String> headers;

    @BeforeEach
    void setUp() {
        newPartyModel = new NewPartyModel();
        headers = new HashMap<>();
    }

    @Test
    void testCreateAbTransaction_Success() throws Exception {
        // Arrange
        CustomerAbResponse customerAbResponse = new CustomerAbResponse();
        PartyService spyService = spy(partyService);

        doNothing().when(spyService).checkHeaderNulls(anyMap());
        doReturn(customerAbResponse).when(spyService).addAbFullPartyDetails(any(), anyMap(), anyString(), anyString());

        // Act
        CustomerAbResponse result = spyService.createAbTransaction(newPartyModel, headers, "corpId123", "identifier");

        // Assert
        assertThat(result).isEqualTo(customerAbResponse);

        verify(spyService).checkHeaderNulls(headers);
        verify(spyService).addAbFullPartyDetails(newPartyModel, headers, "corpId123", "identifier");
    }

    @Test
    void testCreateAbTransaction_HeaderNulls_ThrowsException() throws Exception {
        // Arrange
        PartyService spyService = spy(partyService);
        doThrow(new IllegalArgumentException("Header missing")).when(spyService).checkHeaderNulls(anyMap());

        // Act & Assert
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> spyService.createAbTransaction(newPartyModel, headers, "corpId123", "identifier"));

        assertThat(ex.getMessage()).isEqualTo("Header missing");

        verify(spyService).checkHeaderNulls(headers);
        verify(spyService, never()).addAbFullPartyDetails(any(), anyMap(), anyString(), anyString());
    }
