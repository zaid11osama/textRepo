@Test
void testGetGlobalIdByIdentifer_WhenGlobalIdType_ReturnsRelationship() throws Exception {
    // Arrange
    String identifier = "G123";
    String identifierType = Constants.Others.GLOBAL_ID;
    String inputCountry = "JO";
    String role = "GUARDIAN";
    String withCustomerId = "C999";

    PartyService spyService = Mockito.spy(partyService);
    Relationship expectedRelationship = new Relationship();

    doReturn(expectedRelationship)
            .when(spyService)
            .getRelationshipByGlobalId(identifier, role, withCustomerId);

    // Act
    Relationship result = spyService.getGlobalIdByIdentifer(identifier, identifierType, inputCountry, role, withCustomerId);

    // Assert
    assertNotNull(result);
    assertEquals(expectedRelationship, result);
    verify(spyService).getRelationshipByGlobalId(identifier, role, withCustomerId);
}


@Test
void testGetGlobalIdByIdentifer_WhenCustomerIdType_ReturnsRelationship() throws Exception {
    // Arrange
    String identifier = "C123";
    String identifierType = Constants.Others.CUSTOMER_ID;
    String inputCountry = "JO";
    String role = "ACCOUNT";
    String withCustomerId = null;

    PartyService spyService = Mockito.spy(partyService);
    Relationship expectedRelationship = new Relationship();

    doReturn(expectedRelationship)
            .when(spyService)
            .getRelationshipsByGlobalIdAndCustomerId(identifier, inputCountry, role);

    // Act
    Relationship result = spyService.getGlobalIdByIdentifer(identifier, identifierType, inputCountry, role, withCustomerId);

    // Assert
    assertNotNull(result);
    assertEquals(expectedRelationship, result);
    verify(spyService).getRelationshipsByGlobalIdAndCustomerId(identifier, inputCountry, role);
}


@Test
void testGetGlobalIdByIdentifer_WhenUnsupportedIdentifierType_ThrowsException() {
    // Arrange
    String identifier = "X123";
    String identifierType = "INVALID_TYPE";
    String inputCountry = "JO";
    String role = "USER";
    String withCustomerId = null;

    PartyService spyService = Mockito.spy(partyService);

    // Act & Assert
    CustomerNotFoundException thrown = assertThrows(
            CustomerNotFoundException.class,
            () -> spyService.getGlobalIdByIdentifer(identifier, identifierType, inputCountry, role, withCustomerId)
    );

    assertTrue(thrown.getMessage().contains("Unsupported identifierType"));
}
