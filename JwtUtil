  @Test
    void testBuildGuardianNewPartyModelForPost_Success() throws Exception {
        // Arrange
        Map<String, String> headers = new HashMap<>();
        headers.put(Constants.MdmHeaderRequest.INPUT_COUNTRY, "JO");
        headers.put(Constants.MdmHeaderRequest.LANGUAGE, "EN");
        headers.put(Constants.MdmHeaderRequest.ROLE, null);
        headers.put(Constants.MdmHeaderRequest.WITH_CUSTOMER_ID, null);

        String partyId = "P123";
        String reference = "ref-xyz";

        PartyService spyService = Mockito.spy(partyService);

        // Mock internal calls
        doReturn(relationship)
                .when(spyService)
                .getGlobalIdByIdentifer(eq(partyId), eq(Constants.Others.CUSTOMER_ID), eq("JO"), any(), any());

//        doReturn(reference)
//                .when(helperUtils)
//                .generateReference();

        doReturn(partyModel)
                .when(spyService)
                .getFullPartyDetails(any(), any(), any());

        doReturn(false)
                .when(spyService)
                .checkPartyModelData(any(PartyModel.class));

        doReturn(newPartyModel)
                .when(spyService)
                .mapDtoToModel(eq(partyModel), eq(relationship), eq("EN"), eq("JO"));

        // Act
        NewPartyModel result = spyService.buildGuardianNewPartyModelForPost(headers, partyId);

        // Assert
        assertNotNull(result);
        assertEquals(newPartyModel, result);

        verify(spyService).getGlobalIdByIdentifer(eq(partyId), eq(Constants.Others.CUSTOMER_ID), eq("JO"), any(), any());
        verify(spyService).getFullPartyDetails(eq(relationship), eq(headers), eq(reference));
        verify(spyService).mapDtoToModel(eq(partyModel), eq(relationship), eq("EN"), eq("JO"));
    }
