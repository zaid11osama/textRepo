@Test
void testBuildGuardianNewPartyModelForPost_Success() throws Exception {
    // Arrange
    Map<String, String> headers = new HashMap<>();
    headers.put(Constants.MdmHeaderRequest.INPUT_COUNTRY, "JO");
    headers.put(Constants.MdmHeaderRequest.LANGUAGE, "EN");
    headers.put(Constants.MdmHeaderRequest.ROLE, null);
    headers.put(Constants.MdmHeaderRequest.WITH_CUSTOMER_ID, null);

    String partyId = "P123";

    PartyService spyService = Mockito.spy(partyService);

    // Mock internal calls
    doReturn(relationship)
            .when(spyService)
            .getGlobalIdByIdentifer(eq(partyId), eq(Constants.Others.CUSTOMER_ID), eq("JO"), any(), any());

    // We don't care about the exact reference string (UUID/random)
    doReturn(partyModel)
            .when(spyService)
            .getFullPartyDetails(any(Relationship.class), anyMap(), anyString());

    doReturn(false)
            .when(spyService)
            .checkPartyModelData(any(PartyModel.class));

    doReturn(newPartyModel)
            .when(spyService)
            .mapDtoToModel(eq(partyModel), eq(relationship), eq("EN"), eq("JO"));

    // Act
    NewPartyModel result = spyService.buildGuardianNewPartyModelForPost(headers, partyId);

    // Assert
    assertNotNull(result);
    assertEquals(newPartyModel, result);

    // âœ… Verification (use flexible matchers)
    verify(spyService).getGlobalIdByIdentifer(eq(partyId), eq(Constants.Others.CUSTOMER_ID), eq("JO"), any(), any());
    verify(spyService).getFullPartyDetails(eq(relationship), eq(headers), anyString());
    verify(spyService).mapDtoToModel(eq(partyModel), eq(relationship), eq("EN"), eq("JO"));
}
