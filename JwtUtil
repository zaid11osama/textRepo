@Test
void shouldMapEmploymentIncomesAndEmployerNameProperly() {
    // given
    PartyModel partyModel = new PartyModel();
    com.arabbank.model.entity.golden.EmploymentIncomes incomes = new com.arabbank.model.entity.golden.EmploymentIncomes();
    incomes.setEmployedFrom(Date.valueOf("2020-01-01"));
    incomes.setBusinessSector(new Translation("IT", "IT", "IT"));
    incomes.setEmploymentStatus(new Translation("Full-Time", "Full-Time", "Full-Time"));
    incomes.setSalaryRange(new Translation("1000-2000", "1000-2000", "IT"));
    incomes.setProfession(new Translation("Developer", "Developer", "IT"));
    incomes.setOldProfession("Engineer");
    incomes.setPositionTitle(new Translation("IT", "Senior", "IT"));
    incomes.setPositionOthers("Other Position");
    incomes.setIncomeCode(new Translation("IT", "INC123", "IT"));
    incomes.setSalaryReceptionMechanism(new Translation("IT", "IT", "IT"));
    incomes.setIsSalaryTransferred(1);
    incomes.setIncomeCurrency(new Translation("IT", "USD", "IT"));

    partyModel.setWorkDetail(incomes);

    // ✅ Create a relationship with COM role so loop executes
    Relationship relationship = new Relationship();
    relationship.setRole(new Translation("COM", "COM", "COM")); // IMPORTANT
    relationship.setGlobalId("global-123");
    relationship.setRelationCountry(new Translation("JO", "JO", "JO"));
    relationship.setRelationshipSequence(1);
    relationship.setOrganization("OrgName");

    partyModel.setRelationships(Collections.singletonList(relationship));

    // ✅ Mock the nameRepository call
    Name name = new Name();
    name.setLanguage(new Translation("EN", "EN", "EN"));
    name.setBigName("BigNameValue");

    when(nameRepository.getName(
            anyString(),
            anyString(),
            anyString(),
            anyInt(),
            anyString()
    )).thenReturn(Optional.of(name));

    // when
    Employment result = partyService.mapEmploymentIncomesToEmployment(partyModel);

    // then
    assertNotNull(result);

    // Verify normal mappings
    assertEquals("IT", result.get_businessSector().getCode());
    assertEquals("Full-Time", result.get_status().getCode());
    assertEquals("1000-2000", result.get_salaryRange().getCode());
    assertEquals("Developer", result.get_profession().getCode());
    assertEquals("Engineer", result.getProfessionOthers());
    assertEquals("Senior", result.get_professionalLevel().getCode());
    assertEquals("Other Position", result.getProfessionalLevelOthers());
    assertEquals("INC123", result.get_incomeCode().getCode());
    assertEquals("USD", result.get_incomeCurrency().getCode());
    assertTrue(result.isSalaryTransferred());

    // ✅ Verify employer name mapping
    assertNotNull(result.getEmployerName());
    assertEquals("EN", result.getEmployerName().get_language().getCode());
    assertEquals("BigNameValue", result.getEmployerName().getBigName());

    // ✅ Verify the mock was actually used
    verify(nameRepository, times(1)).getName(
            anyString(),
            anyString(),
            anyString(),
            anyInt(),
            anyString()
    );
}
