 @Test
    void testUpdateCustomer_Success() throws Exception {
        // Arrange
        String baseUrl = "http://brain-service";
        String expectedUrl = baseUrl + "/brain/update-customer";
        ResponseEntity<ResponseModel> mockResponse = new ResponseEntity<>(responseModel, HttpStatus.OK);

        when(configReader.getProperty("mdm.microservices.brain")).thenReturn(baseUrl);
        when(restTemplate.exchange(eq(expectedUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(ResponseModel.class)))
                .thenReturn(mockResponse);

        // Spy the client to mock checkResponse()
        MdmApisClient spyClient = Mockito.spy(mdmApisClient);
        doNothing().when(spyClient).checkResponse(mockResponse);

        // Act
        spyClient.updateCustomer(mainModel);

        // Assert
        verify(restTemplate, times(1))
                .exchange(eq(expectedUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(ResponseModel.class));
        verify(spyClient, times(1)).checkResponse(mockResponse);
    }

    @Test
    void testUpdateCustomer_ExceptionHandledInFinally() throws Exception {
        // Arrange
        String baseUrl = "http://brain-service";
        String expectedUrl = baseUrl + "/brain/update-customer";
        when(configReader.getProperty("mdm.microservices.brain")).thenReturn(baseUrl);
        when(restTemplate.exchange(eq(expectedUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(ResponseModel.class)))
                .thenThrow(new RuntimeException("Server error"));

        MdmApisClient spyClient = Mockito.spy(mdmApisClient);
        doNothing().when(spyClient).checkResponse(any());

        // Act & Assert
        assertThrows(RuntimeException.class, () -> spyClient.updateCustomer(mainModel));

        verify(restTemplate, times(1))
                .exchange(eq(expectedUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(ResponseModel.class));
    }

