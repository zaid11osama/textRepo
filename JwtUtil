@Test
void testGetSpecificModel_Success() throws Exception {
    // Arrange
    String modelName = "TestModel";
    String identifier = "id123";
    Object expectedResponse = new Object();

    when(dbLogger.logIntoDb(any(), any(), any(), any())).thenReturn(logChannel);
    when(partyService.generalGet(any(), any(), any())).thenReturn(expectedResponse);
    when(objectMapper.writeValueAsString(expectedResponse)).thenReturn("{json}");

    // Act
    Object result = mainService.getSpecificModel(modelName, identifier, headers);

    // Assert
    assertThat(result).isEqualTo(expectedResponse);

    verify(dbLogger).updateLogChannelOutput(
            eq("{json}"),
            eq(HttpStatus.OK.name()),
            eq(HttpStatus.OK.value()),
            eq(logChannel)
    );
}

@Test
void testGetSpecificModel_Exception() throws Exception {
    // Arrange
    String modelName = "TestModel";
    String identifier = "id123";

    when(dbLogger.logIntoDb(any(), any(), any(), any())).thenReturn(logChannel);
    when(partyService.generalGet(any(), any(), any()))
            .thenThrow(new RuntimeException("Model fetch failed"));

    // Act & Assert
    Exception ex = assertThrows(RuntimeException.class,
            () -> mainService.getSpecificModel(modelName, identifier, headers));

    assertThat(ex.getMessage()).isEqualTo("Model fetch failed");

    verify(dbLogger).updateLogChannelOutput(
            eq("Model fetch failed"),
            eq(HttpStatus.BAD_REQUEST.name()),
            eq(HttpStatus.BAD_REQUEST.value()),
            eq(logChannel)
    );
}
