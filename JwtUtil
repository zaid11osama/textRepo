@Test
    void shouldReturnNullIfPartyModelIsNull() {
        assertNull(mapper.mapEmploymentIncomesToEmployment(null));
    }

    @Test
    void shouldReturnNullIfEmploymentIncomesIsNull() {
        PartyModel partyModel = new PartyModel();
        partyModel.setWorkDetail(null);
        assertNull(mapper.mapEmploymentIncomesToEmployment(partyModel));
    }

    @Test
    void shouldMapEmploymentIncomesProperly() {
        // given
        PartyModel partyModel = new PartyModel();
        com.arabbank.model.entity.golden.EmploymentIncomes incomes = new com.arabbank.model.entity.golden.EmploymentIncomes();
        incomes.setEmployedFrom("2020-01-01");
        incomes.setBusinessSector("IT");
        incomes.setEmploymentStatus("Full-Time");
        incomes.setSalaryRange("1000-2000");
        incomes.setProfession("Developer");
        incomes.setOldProfession("Engineer");
        incomes.setPositionTitle("Senior");
        incomes.setPositionOthers("Other Position");
        incomes.setIncomeCode("INC123");
        incomes.setSalaryReceptionMechanism("Bank Transfer");
        incomes.setIsSalaryTransferred(1);
        incomes.setIncomeCurrency("USD");

        partyModel.setWorkDetail(incomes);

        Relationship relationship = new Relationship();
        Role role = new Role();
        role.setCode("COM");
        relationship.setRole(role);
        relationship.setGlobalId("global-123");
        relationship.setRelationCountry("JO");
        relationship.setRelationshipSequence(1);
        relationship.setOrganization("OrgName");

        partyModel.setRelationships(Collections.singletonList(relationship));

        Name name = new Name();
        name.setLanguage("EN");
        name.setBigName("BigNameValue");

        when(nameRepository.getName(any(), anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Optional.of(name));

        // when
        Employment result = mapper.mapEmploymentIncomesToEmployment(partyModel);

        // then
        assertNotNull(result);
        assertEquals("2020-01-01", result.getEmployedFrom());
        assertEquals("IT", result.get_businessSector());
        assertEquals("Full-Time", result.get_status());
        assertEquals("1000-2000", result.get_salaryRange());
        assertEquals("Developer", result.get_profession());
        assertEquals("Engineer", result.getProfessionOthers());
        assertEquals("Senior", result.get_professionalLevel());
        assertEquals("Other Position", result.getProfessionalLevelOthers());
        assertEquals("INC123", result.get_incomeCode());
        assertEquals("Bank Transfer", result.getSalaryReceptionMechanism());
        assertTrue(result.getSalaryTransferred());
        assertEquals("USD", result.get_incomeCurrency());

        assertNotNull(result.getEmployerName());
        assertEquals("EN", result.getEmployerName().get_language());
        assertEquals("BigNameValue", result.getEmployerName().getBigName());

        verify(nameRepository).getName(eq("global-123"), anyString(), anyString(), eq(1), eq("OrgName"));
    }

    @Test
    void shouldSkipEmployerNameIfRoleIsNotCOM() {
        PartyModel partyModel = new PartyModel();
        com.arabbank.model.entity.golden.EmploymentIncomes incomes = new com.arabbank.model.entity.golden.EmploymentIncomes();
        partyModel.setWorkDetail(incomes);

        Relationship relationship = new Relationship();
        Role role = new Role();
        role.setCode("OTHER");
        relationship.setRole(role);

        partyModel.setRelationships(Collections.singletonList(relationship));

        Employment result = mapper.mapEmploymentIncomesToEmployment(partyModel);

        assertNotNull(result);
        assertNull(result.getEmployerName());
        verifyNoInteractions(nameRepository);
    }
