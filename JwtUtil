 @Test
    void shouldMapContactsToPartyPhones() {
        // given
        Contact residentialContact = new Contact();
        residentialContact.setType(new Translation("RSF", "Residential", "Residential"));
        residentialContact.setPhone("123456789");
        residentialContact.setUsage(1);

        Contact smsContact = new Contact();
        smsContact.setType(new Translation("SMS", "SMS", "SMS"));
        smsContact.setPhone("987654321");
        smsContact.setUsage(2);

        List<Contact> contacts = Arrays.asList(residentialContact, smsContact);

        // Mock HelperUtils static call
        try (MockedStatic<HelperUtils> mockedHelper = mockStatic(HelperUtils.class)) {
            mockedHelper.when(() -> HelperUtils.checkTranslation(any()))
                        .thenAnswer(invocation -> ((Translation) invocation.getArgument(0)).getCode());

            PartyService spyService = Mockito.spy(new PartyService());

            // Mock getPhoneType and setPhones behavior
            doReturn("HOME").when(spyService).getPhoneType("RSF");
            doNothing().when(spyService).setPhones(anyInt(), any(Contact.class), any(PartyPhone.class), anyString());

            // when
            Map<String, List<PartyPhone>> result = spyService.mapPhoneToPartyContact(contacts);

            // then
            assertNotNull(result);
            assertTrue(result.containsKey("residential"));
            assertTrue(result.containsKey("sms"));

            assertEquals(1, result.get("residential").size());
            assertEquals(1, result.get("sms").size());
        }
    }

    @Test
    void shouldReturnNull_WhenContactsListIsNull() {
        PartyService partyService = new PartyService();

        Map<String, List<PartyPhone>> result = partyService.mapPhoneToPartyContact(null);

        assertNull(result);
    }

    @Test
    void shouldSkipContactsWithoutPhone() {
        Contact contactWithoutPhone = new Contact();
        contactWithoutPhone.setType(new Translation("RSF", "Residential", "Residential"));
        contactWithoutPhone.setPhone(null);

        PartyService partyService = new PartyService();

        Map<String, List<PartyPhone>> result = partyService.mapPhoneToPartyContact(Collections.singletonList(contactWithoutPhone));

        assertNotNull(result);
        assertTrue(result.get("residential").isEmpty());
    }
