 @Test
    void testFindByFileKey_WhenRepositoryReturnsList() {
        // Arrange
        String key = "FILE1";
        MdmSysTranslations t1 = new MdmSysTranslations();
        MdmSysTranslations t2 = new MdmSysTranslations();
        List<MdmSysTranslations> list = List.of(t1, t2);

        when(mdmSysTranslationsRepository.getTranslationsByFileKey(key))
                .thenReturn(Optional.of(list));

        // Act
        List<MdmSysTranslations> result = translationsService.findByFileKey(key);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertSame(list, result);
        verify(mdmSysTranslationsRepository).getTranslationsByFileKey(key);
    }

    @Test
    void testFindByFileKey_WhenRepositoryReturnsEmptyOptional() {
        // Arrange
        String key = "UNKNOWN";
        when(mdmSysTranslationsRepository.getTranslationsByFileKey(key))
                .thenReturn(Optional.empty());

        // Act
        List<MdmSysTranslations> result = translationsService.findByFileKey(key);

        // Assert
        assertNull(result);
        verify(mdmSysTranslationsRepository).getTranslationsByFileKey(key);
    }

    @Test
    void testFindByFileKey_WhenRepositoryThrowsException() {
        // Arrange
        String key = "ERROR";
        when(mdmSysTranslationsRepository.getTranslationsByFileKey(key))
                .thenThrow(new RuntimeException("DB failure"));

        // Act + Assert
        RuntimeException ex = assertThrows(RuntimeException.class,
                () -> translationsService.findByFileKey(key));

        assertEquals("DB failure", ex.getMessage());
        verify(mdmSysTranslationsRepository).getTranslationsByFileKey(key);
    }
