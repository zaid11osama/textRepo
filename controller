@PostMapping("/sendData/{numberOfThreads}")
public ResponseEntity<List<ResponseEntity<Object>>> sendData(@PathVariable int numberOfThreads) {

    List<Curls.Curl> allCurls = curls.getCurls();
    int totalCurls = allCurls.size();
    int curlsPerThread = (int) Math.ceil((double) totalCurls / numberOfThreads);

    List<CompletableFuture<List<ResponseEntity<Object>>>> futures = new ArrayList<>();

    for (int j = 0; j < numberOfThreads; j++) {
        int startIdx = j * curlsPerThread;
        int endIdx = Math.min(startIdx + curlsPerThread, totalCurls);
        List<Curls.Curl> assignedCurls = allCurls.subList(startIdx, endIdx);

        int requestID = j + 1;
        System.out.println("Thread " + (j + 1) + " processing curls " + startIdx + " to " + (endIdx - 1));
        futures.add(stressTestService.callApi(requestID, assignedCurls));
    }

    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();

    List<ResponseEntity<Object>> responses = futures.stream()
            .flatMap(future -> future.join().stream())
            .collect(Collectors.toList());

    return new ResponseEntity<>(responses, HttpStatus.OK);
}
