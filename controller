package com.TestApi.start.controller;

import com.TestApi.start.service.StressTestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class StressTestController {

    private final StressTestService stressTestService;

    @Autowired
    public StressTestController(StressTestService stressTestService) {
        this.stressTestService = stressTestService;
    }

    @PostMapping("/sendData/{numberOfThreads}")
    public ResponseEntity<List<ResponseEntity<Object>>> sendData(@PathVariable int numberOfThreads) {

        List<CompletableFuture<List<ResponseEntity<Object>>>> futures = new ArrayList<>();

        for (int j = 0; j < numberOfThreads; j++) {
            int threadNumber = j + 1;
            int requestID = (threadNumber - 1) * numberOfThreads + (j + 1);
            System.out.println("future " + (j + 1));
            futures.add(stressTestService.callApi(requestID));
        }

        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();

        List<ResponseEntity<Object>> responses = futures.stream()
                .flatMap(future -> future.join().stream())
                .collect(Collectors.toList());

        return new ResponseEntity<>(responses, HttpStatus.OK);
    }
}
