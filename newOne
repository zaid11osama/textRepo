{
  "curls":

  [

    {
      "type": "get",
      "url": "https://10.101.15.27:8443/mdm-ms-api/mdm/v1/api/customer/DQ3IBE/v2/profile",
      "expected": "200 ok",

      "headers": {
        "content-type": "application/json",
        "accept": "*/*",
        " accept-encoding": "gzip, deflate, br",
        "authorization": "afdfasdfsadf",
        "acceptEncoding": "acceptEncoding",
        "connection": "sdfdsf",
        "origin": "origin",
        "referer":"asd",
        "userAgent": "sdf",
        "tenantID": "sfdfsd",
        "channelID": "requestCountry",
        "requestCountry": "sdf",
        "transactionReference": "dfgdgf",
        "requesterID": "dsf",
        "requesterKey": "sdf",
        "inputTimestamp": "dasf",
        "language": "sdf",
        "dataSource": "fdsg",
        "user": "sdf",
        "requestChannel": "sdfgg",
        "channelReference": "dsfsdf",
        "identifierType": "sdfg",
        "inputCountry": "sdfsg",
        "channel": "terh",
        "relationshipCountry": "sdfgsdf"

      }

    }

  ]
}











******************************************************************************








package com.TestApi.start.config;

import com.fasterxml.jackson.databind.JsonNode;
import lombok.Getter;
import lombok.Setter;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import java.util.List;
@Setter
@Getter
@Component
public class Curls {

    private List<Curl> curls;



    @Setter
    @Getter
    public static class Curl {

        private String type;
        private String url;
        private JsonNode body;
        private String expected;
        private Headers headers;





        @Getter
        @Setter
        public static class Headers {
            private String contentType;
            private String authorization;
            private String accept;
            private String acceptEncoding;
            private String connection;
            private String origin;
            private String referer;
            private String userAgent;
            private String tenantID;
            private String channelID;
            private String requestCountry;
            private String transactionReference;
            private String requesterID;
            private String requesterKey;
            private String inputTimestamp;
            private String language;
            private String dataSource;
            private String user;
            private String requestChannel;
            private String channelReference;
            private String identifierType;
            private String inputCountry;
            private String channel;
            private String relationshipCountry;
        }



        public HttpHeaders buildHttpHeaders() {
            HttpHeaders httpHeaders = new HttpHeaders();
            Headers h = this.getHeaders();

            if (h.getContentType() != null) httpHeaders.set("content-type", h.getContentType());
            if (h.getAccept() != null) httpHeaders.set("accept", h.getAccept());
            if (h.getAcceptEncoding() != null) httpHeaders.set("accept-encoding", h.getAcceptEncoding());
            if (h.getConnection() != null) httpHeaders.set("connection", h.getConnection());
            if (h.getOrigin() != null) httpHeaders.set("origin", h.getOrigin());
            if (h.getReferer() != null) httpHeaders.set("referer", h.getReferer());
            if (h.getUserAgent() != null) httpHeaders.set("user-agent", h.getUserAgent());
            if (h.getTenantID() != null) httpHeaders.set("tenantId", h.getTenantID());
            if (h.getChannelID() != null) httpHeaders.set("channelId", h.getChannelID());
            if (h.getRequestCountry() != null) httpHeaders.set("requestcountry", h.getRequestCountry());
            if (h.getTransactionReference() != null)
                httpHeaders.set("transactionReference", h.getTransactionReference());
            if (h.getRequesterID() != null) httpHeaders.set("requesterId", h.getRequesterID());
            if (h.getRequesterKey() != null) httpHeaders.set("requesterKey", h.getRequesterKey());
            if (h.getInputTimestamp() != null) httpHeaders.set("inputTimestamp", h.getInputTimestamp());
            if (h.getLanguage() != null) httpHeaders.set("language", h.getLanguage());
            if (h.getDataSource() != null) httpHeaders.set("dataSource", h.getDataSource());
            if (h.getUser() != null) httpHeaders.set("user", h.getUser());
            if (h.getRequestChannel() != null) httpHeaders.set("requestChannel", h.getRequestChannel());
            if (h.getChannelReference() != null) httpHeaders.set("channelReference", h.getChannelReference());
            if (h.getIdentifierType() != null) httpHeaders.set("identifiertype", h.getIdentifierType());
            if (h.getInputCountry() != null) httpHeaders.set("inputcountry", h.getInputCountry());
            if (h.getChannel() != null) httpHeaders.set("channel", h.getChannel());
            if (h.getRelationshipCountry() != null) httpHeaders.set("relationship-country", h.getRelationshipCountry());

            if (h.getAuthorization() != null) httpHeaders.setBearerAuth(h.getAuthorization());

            return httpHeaders;
        }





    }

}


