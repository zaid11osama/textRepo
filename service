package com.TestApi.start.service;

import com.TestApi.start.config.Curls;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

@Service
public class StressTestService {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    private final RestTemplate restTemplate;
    private final HttpHeaders commonHeaders;
    private final Curls curls;

    @Autowired
    public StressTestService(RestTemplate restTemplate, HttpHeaders commonHeaders, Curls curls) {

        this.restTemplate = restTemplate;
        this.commonHeaders = commonHeaders;
        this.curls = curls;
    }

    @Async("taskExecutor")
    public CompletableFuture<List<ResponseEntity<Object>>> callApi(int requestID) {

//        List<String>urls = apiConfig.getGetUrls();
        //Map<String,String>headers = curl.getHeaders();

        commonHeaders.set("transactionReference", UUID.randomUUID().toString());
        List<ResponseEntity<Object>> responses = new ArrayList<>();
        for (Curls.Curl curl : curls.getCurls()) {

            ResponseEntity<Object> response = null;
            try {
                HttpEntity<Object> entity;
                if (curl.getBody() != null) {
                    entity = new HttpEntity<>(curl.getBody(), commonHeaders);
                } else {
                    entity = new HttpEntity<>(commonHeaders);
                }

                response = restTemplate.exchange(curl.getUrl(), getHttpType(curl.getType()), entity, Object.class);

                responses.add((response));

                log.info("Request {} completed by {}", requestID, Thread.currentThread().getName());
            } catch (Exception e) {
                log.error("Request {} failed for url {} - {}", requestID, curl.getUrl(), e.getMessage());
            } finally {
                if(response!= null)
                saveResponseToFile(response.toString());
                else
                    saveResponseToFile("200 OK OK, []");

            }
        }
        return CompletableFuture.completedFuture(responses);
    }

    private HttpMethod getHttpType(String type) {
        if (type.equalsIgnoreCase("GET")) {
            return HttpMethod.GET;
        } else if (type.equalsIgnoreCase("POST")) {
            return HttpMethod.POST;
        } else if (type.equalsIgnoreCase("PUT")) {
            return HttpMethod.PUT;
        } else if (type.equalsIgnoreCase("DELETE")) {
            return HttpMethod.DELETE;
        }
        throw new IllegalArgumentException("Unsupported HTTP type: " + type);
    }

    private void saveResponseToFile(String responseBody) {

        try {
            String fileName = "C:\\Users\\Dev04\\Desktop\\result.txt";
            File file = new File(fileName);
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
                writer.write(responseBody);
                writer.newLine();
                writer.newLine();
                writer.newLine();
                writer.newLine();
                writer.newLine();
                writer.newLine();


            }
        } catch (IOException e) {

            System.out.println(e);
        }
    }


}
